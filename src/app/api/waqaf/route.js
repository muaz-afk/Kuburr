import { NextResponse } from 'next/server';
import { createClient } from '@/lib/supabase/server';

// Basic email validation regex
const EMAIL_REGEX = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;

export async function POST(request) {
  const supabase = createClient();
  let requestData;

  try {
    requestData = await request.json();
  } catch (error) {
    return NextResponse.json({ success: false, message: 'Invalid JSON payload.' }, { status: 400 });
  }

  const { donor_name, donor_email, amount, message, receipt_url, receipt_filename } = requestData;
  const errors = {};

  // Validate amount
  if (typeof amount !== 'number' || amount <= 0) {
    errors.amount = 'Amount must be a positive number.';
  }

  // Validate donor_email if provided
  if (donor_email && (typeof donor_email !== 'string' || !EMAIL_REGEX.test(donor_email))) {
    errors.donor_email = 'Invalid email format.';
  }

  if (Object.keys(errors).length > 0) {
    return NextResponse.json({ success: false, message: 'Invalid input.', errors }, { status: 400 });
  }

  const transaction_id = `WQF_${new Date().getTime()}`;

  const waqafData = {
    donor_name: donor_name || null,
    donor_email: donor_email || null,
    amount,
    message: message || null,
    transaction_id,
    payment_status: 'SUCCESSFUL',
    payment_method: 'QR_PAYMENT',
    receipt_url: receipt_url || null,
    receipt_filename: receipt_filename || null,
    // currency, created_at, updated_at will use DB defaults
    // id will be generated by Supabase/PostgreSQL
  };

  try {
    const { data, error } = await supabase
      .from('Waqaf')
      .insert(waqafData)
      .select('id') // Select the id of the newly inserted row
      .single(); // Expect a single row to be returned

    if (error) {
      console.error('Supabase error inserting waqaf:', error);
      // Check for specific errors if needed, e.g., unique constraint violation
      return NextResponse.json({ success: false, message: 'Could not process donation due to database error.' }, { status: 500 });
    }

    if (!data || !data.id) {
        console.error('Supabase insert did not return data or id:', data);
        return NextResponse.json({ success: false, message: 'Donation processed but failed to retrieve ID.' }, { status: 500 });
    }

    return NextResponse.json(
      {
        success: true,
        message: 'Waqaf submitted successfully.',
        data: {
          donationId: data.id,
          transactionId: transaction_id,
          receiptId: data.id,
        },
      },
      { status: 201 }
    );
  } catch (err) {
    console.error('Server error processing waqaf:', err);
    return NextResponse.json({ success: false, message: 'Could not process donation due to an unexpected server error.' }, { status: 500 });
  }
}